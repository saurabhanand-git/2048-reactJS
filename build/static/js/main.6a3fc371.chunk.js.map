{"version":3,"sources":["Nav.jsx","Styles.js","TwentyFourtyEight.js","serviceWorker.js","index.js"],"names":["Nav","className","ParentContainer","styled","div","BtnGroup","OuterBox","ScoreContainer","ActualScore","gameObj","button","4","5","6","8","TwentyFourtyEight","props","changeGrid","num","state","game","size","startOver","setState","gridChange","sizeArg","console","log","m","t","Array","fill","i","push","slice","insertNew","matrix","prev","score","prevScore","optedForRestart","isGameWon","continue","myRef","current","focus","move","el","dir","maxValue","length","r","rIndex","c","cIndex","merge","mat","ind","arrIndices","forEach","currEl","includes","filter","x","j","lastIndex","index","next","value","random","min","max","Math","floor","containsNull","array","map","subArray","some","init","flag","JSON","stringify","rowIndex","colIndex","undoAction","swipeToKeyboardEmulator","e","toLowerCase","handleKeyDown","key","a","clone","items","item","isArray","row","element","s","hasMatrixChanged","colSorted","sort","b","reverse","onUnload","preventDefault","returnValue","React","createRef","this","window","removeEventListener","onFocus","onClick","title","onSwiped","eventData","preventDefaultTouchmoveEvent","ref","onBlur","onKeyDown","tabIndex","style","fontSize","fontWeight","isGameOver","flexDirection","display","width","justifyContent","margin","textAlign","color","Component","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.6a3fc371.chunk.js","sourcesContent":["import React from 'react';\r\nimport \"./Nav.css\";\r\n\r\nconst Nav = () => {\r\n  return (\r\n    <div className=\"navbar\">\r\n        <div className=\"navText\">\r\n            2048\r\n        </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Nav;","import styled from 'styled-components'\r\n\r\nexport const ParentContainer = styled.div`\r\ndisplay: flex;\r\njustify-content: center;\r\nalign-items: center;\r\n\r\n@media screen and (max-width: 764px){\r\n  flex-direction: column;\r\n}\r\n`\r\n\r\nexport const BtnGroup = styled.div`\r\n@media screen and (max-width: 764px){\r\n  order: 0;\r\n  display: flex;\r\n}\r\n`\r\n\r\nexport const OuterBox = styled.div`\r\nwidth: 600px;\r\nheight: 600px;\r\nbackground: #80808099;\r\ndisplay: flex;\r\nflex-wrap: wrap;\r\nposition: relative;\r\n\r\n@media screen and (max-width: 764px){\r\n  width: 100vw;\r\n  height: 100vw;\r\n  max-height: 80vh;\r\n  max-width: 80vh;\r\n}\r\n`\r\n\r\nexport const ScoreContainer = styled.div`\r\ndisplay: flex;\r\nflex-direction: column;\r\nbackground-color: grey;\r\nmargin: 10px;\r\ncolor: white;\r\nborder-radius: 5px;\r\njustify-content: center;\r\nalign-items: center;\r\n`\r\nexport const ActualScore = styled.div`\r\n  text-align: center;\r\n  padding: 20px 5px;\r\n`\r\nexport const GameBtn = styled.button`\r\n  text-align: center;\r\n  padding: 20px 5px;\r\n`\r\n","import React, { Component } from \"react\";\r\nimport \"./TwentyFourtyEight.css\";\r\nimport { Swipeable } from \"react-swipeable\";\r\nimport {\r\n  ParentContainer,\r\n  BtnGroup,\r\n  OuterBox,\r\n  ScoreContainer,\r\n  ActualScore\r\n} from \"./Styles\";\r\n\r\n// classic = 4x4\r\n// big = 5x5\r\n// bigger = 6x6\r\n// huge = 8x8\r\n\r\nconst gameObj = {\r\n  4: \"_classic\",\r\n  5: \"_big\",\r\n  6: \"_bigger\",\r\n  8: \"_huge\"\r\n};\r\n\r\nclass TwentyFourtyEight extends Component {\r\n  // the game will be of 4x4\r\n  constructor(props) {\r\n    super(props);\r\n    this.myRef = React.createRef();\r\n    this.state = {\r\n      // matrix: [],\r\n      game: {\r\n        size: \"_classic\"\r\n      },\r\n      matrix: [\r\n        [null, null, null, null],\r\n        [null, null, null, null],\r\n        [null, null, null, null],\r\n        [null, null, null, null],\r\n        [null, null, null, null]\r\n      ],\r\n      prev: [],\r\n      score: 0,\r\n      prevScore: 0,\r\n      gridChange: false,\r\n      optedForRestart: false\r\n      // very important below\r\n\r\n      // matrix: [\r\n      //   [4, null, 2, null],\r\n      //   [4, 128, null, null],\r\n      //   [null, 512, 2, null],\r\n      //   [4, null, 2, null]\r\n      // ]\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    // this.myRef.current.focus();\r\n    this.startOver(4);\r\n    // window.addEventListener(\"beforeunload\", this.onUnload);\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    window.removeEventListener(\"beforeunload\", this.onUnload);\r\n  }\r\n\r\n  changeGrid = num => {\r\n    if (gameObj[num] !== this.state.game.size) {\r\n      this.startOver(num);\r\n    }\r\n    this.setState({\r\n      gridChange: false\r\n    });\r\n  };\r\n\r\n  startOver = sizeArg => {\r\n    let size = sizeArg ? sizeArg : this.state.game.size;\r\n    console.log(size);\r\n\r\n    // const gameObj = {\r\n    //   4: \"_classic\",\r\n    //   5: \"_big\",\r\n    //   6: \"_bigger\",\r\n    //   8: \"_huge\"\r\n    // };\r\n\r\n    let m = [];\r\n    let t = Array(size).fill(null);\r\n    for (let i = 0; i < size; i++) {\r\n      m.push(t.slice());\r\n    }\r\n    // let m = [\r\n    //   [null, null, null, null,null],\r\n    //   [null, null, null, null,null],\r\n    //   [null, null, null, null,null],\r\n    //   [null, null, null, null,null],\r\n    //   [null, null, null, null,null],\r\n    // ];\r\n    this.insertNew(m, true);\r\n    this.insertNew(m, true);\r\n    this.setState({\r\n      matrix: m,\r\n      prev: m,\r\n      score: 0,\r\n      prevScore: 0,\r\n      game: {\r\n        ...this.state.game,\r\n        size: gameObj[size]\r\n      },\r\n      optedForRestart: false,\r\n      isGameWon: false,\r\n      continue: false\r\n    });\r\n    this.myRef.current.focus();\r\n  };\r\n\r\n  move = (m, el, dir) => {\r\n    // both rows and columns will be equal\r\n    const maxValue = m.length - 1;\r\n\r\n    let r = el.rIndex;\r\n    let c = el.cIndex;\r\n    // let v = el.value;\r\n\r\n    if (dir === \"up\" && r !== 0) {\r\n      //shift logic\r\n      while (r !== 0 && !m[r - 1][c]) {\r\n        m[r - 1][c] = m[r][c];\r\n        m[r][c] = null;\r\n        // if (r - 1 > 0) {\r\n        r = r - 1;\r\n        // } else {\r\n        // break;\r\n        // }\r\n      }\r\n    }\r\n\r\n    if (dir === \"down\" && r !== maxValue) {\r\n      while (r !== maxValue && !m[r + 1][c]) {\r\n        m[r + 1][c] = m[r][c];\r\n        m[r][c] = null;\r\n        r = r + 1;\r\n      }\r\n    }\r\n\r\n    // c = 3;\r\n\r\n    if (dir === \"right\" && c !== maxValue) {\r\n      while (c !== maxValue && !m[r][c + 1]) {\r\n        m[r][c + 1] = m[r][c];\r\n        m[r][c] = null;\r\n        c = c + 1;\r\n      }\r\n    }\r\n\r\n    if (dir === \"left\") {\r\n      while (c !== 0 && !m[r][c - 1]) {\r\n        m[r][c - 1] = m[r][c];\r\n        m[r][c] = null;\r\n        c = c - 1;\r\n      }\r\n    }\r\n  };\r\n\r\n  merge = (mat, ind, dir) => {\r\n    let m = mat.slice();\r\n    let arrIndices = [];\r\n    let t = [];\r\n    let score = this.state.score;\r\n    const maxValue = mat.length - 1;\r\n\r\n    if (dir === \"up\" || dir === \"down\") {\r\n      ind.forEach((currEl, i) => {\r\n        if (!arrIndices.includes(i)) {\r\n          t = ind.filter((x, j) => {\r\n            if (currEl.cIndex === x.cIndex) {\r\n              arrIndices.push(j);\r\n              return currEl.cIndex === x.cIndex;\r\n            }\r\n            return null\r\n          });\r\n\r\n          if (dir === \"up\") {\r\n            let index = 0;\r\n            let lastIndex;\r\n            t.forEach((currEl, i) => {\r\n              let next = t[i + 1];\r\n              if (i !== lastIndex) {\r\n                if (next) {\r\n                  if (currEl.value === next.value) {\r\n                    m[index][currEl.cIndex] = 2 * currEl.value;\r\n                    m[currEl.rIndex][currEl.cIndex] = 2 * currEl.value; // might seem repetitive, but is needed\r\n                    if (2 * currEl.value === 2048) {\r\n                      this.setState({\r\n                        isGameWon: true\r\n                      });\r\n                    }\r\n                    score = score + 2 * currEl.value;\r\n                    m[next.rIndex][next.cIndex] = null;\r\n                    m[index + 1][currEl.cIndex] = null; // might seem repetitive, but is needed\r\n                    index = index + 1;\r\n                    lastIndex = i + 1;\r\n                  } else {\r\n                    m[index + 1][currEl.cIndex] = null;\r\n                    m[currEl.rIndex][currEl.cIndex] = null;\r\n                    m[index][currEl.cIndex] = currEl.value;\r\n                    index = index + 1;\r\n                  }\r\n                } else {\r\n                  m[currEl.rIndex][currEl.cIndex] = null;\r\n                  m[index][currEl.cIndex] = currEl.value;\r\n\r\n                  if (m[index + 1]) {\r\n                    m[index + 1][currEl.cIndex] = null;\r\n                  }\r\n\r\n                  index = index + 1;\r\n                  lastIndex = null;\r\n                }\r\n              }\r\n            });\r\n          } else if (dir === \"down\") {\r\n            let index = maxValue; //max-rows\r\n            let lastIndex;\r\n\r\n            t.forEach((currEl, i) => {\r\n              let next = t[i + 1];\r\n              if (next) {\r\n                if (i !== lastIndex) {\r\n                  if (currEl.value === next.value) {\r\n                    m[index][currEl.cIndex] = 2 * currEl.value;\r\n                    score = score + 2 * currEl.value;\r\n                    if (2 * currEl.value === 2048) {\r\n                      this.setState({\r\n                        isGameWon: true\r\n                      });\r\n                    }\r\n                    m[next.rIndex][next.cIndex] = null;\r\n                    m[index - 1][currEl.cIndex] = null;\r\n                    index = index - 1;\r\n                    lastIndex = i + 1;\r\n                  } else {\r\n                    m[index][currEl.cIndex] = currEl.value;\r\n\r\n                    m[index - 1][currEl.cIndex] = null;\r\n                    index = index - 1;\r\n                  }\r\n                }\r\n              } else {\r\n                if (i !== lastIndex) {\r\n                  console.log(currEl.rIndex, currEl.cIndex);\r\n                  m[currEl.rIndex][currEl.cIndex] = null;\r\n                  m[index][currEl.cIndex] = currEl.value;\r\n                  if (m[index - 1]) {\r\n                    m[index - 1][currEl.cIndex] = null;\r\n                  }\r\n\r\n                  index = index - 1;\r\n                }\r\n              }\r\n            });\r\n          }\r\n        }\r\n      });\r\n    } else if (dir === \"right\" || dir === \"left\") {\r\n      if (dir === \"right\") {\r\n        for (let i = 0; i < m.length; i++) {\r\n          for (let j = m[i].length - 1; j >= 0; j--) {\r\n            if (j !== 0 && m[i][j]) {\r\n              if (m[i][j] === m[i][j - 1]) {\r\n                if (2 * m[i][j] === 2048) {\r\n                  this.setState({\r\n                    isGameWon: true\r\n                  });\r\n                }\r\n                m[i][j] = 2 * m[i][j];\r\n                score = score + 2 * m[i][j];\r\n                m[i][j - 1] = null;\r\n              }\r\n            }\r\n          }\r\n        }\r\n\r\n        for (let i = 0; i < m.length; i++) {\r\n          for (let j = m[i].length - 1; j >= 0; j--) {\r\n            if (j !== 0) {\r\n              if (!m[i][j] && m[i][j - 1]) {\r\n                m[i][j] = m[i][j - 1];\r\n                m[i][j - 1] = null;\r\n              }\r\n            }\r\n          }\r\n        }\r\n\r\n        // this.setState({\r\n        //   matrix: m\r\n        // });\r\n      } else {\r\n        for (let i = 0; i < m.length; i++) {\r\n          for (let j = 0; j <= m[i].length - 1; j++) {\r\n            if (j !== m[i].length && m[i][j]) {\r\n              if (m[i][j] === m[i][j + 1]) {\r\n                if (2 * m[i][j] === 2048) {\r\n                  this.setState({\r\n                    isGameWon: true\r\n                  });\r\n                }\r\n                m[i][j] = 2 * m[i][j];\r\n                score = score + 2 * m[i][j];\r\n                m[i][j + 1] = null;\r\n              }\r\n            }\r\n          }\r\n        }\r\n\r\n        for (let i = 0; i < m.length; i++) {\r\n          for (let j = 0; j <= m[i].length - 1; j++) {\r\n            if (j !== m[i].length - 1) {\r\n              if (!m[i][j] && m[i][j + 1]) {\r\n                m[i][j] = m[i][j + 1];\r\n                m[i][j + 1] = null;\r\n              }\r\n            }\r\n          }\r\n        }\r\n\r\n        // this.setState({\r\n        //   matrix: m\r\n        // });\r\n      }\r\n    }\r\n\r\n    return score;\r\n  };\r\n\r\n  random = (min, max) => {\r\n    // min and max included\r\n    return Math.floor(Math.random() * (max - min + 1) + min);\r\n  };\r\n\r\n  containsNull = array => {\r\n    let arr = array.map(subArray => {\r\n      let res;\r\n      res = subArray.some(value => {\r\n        return !value;\r\n      });\r\n      return res;\r\n    });\r\n    if (arr.includes(true)) {\r\n      return true;\r\n    } else {\r\n      return false;\r\n    }\r\n  };\r\n\r\n  // deepCompare = (m) => {\r\n\r\n  // }\r\n\r\n  insertNew = (m, init = false) => {\r\n    const maxValue = m.length - 1;\r\n    let flag = init\r\n      ? true\r\n      : JSON.stringify(m) !== JSON.stringify(this.state.matrix);\r\n    if (flag) {\r\n      if (this.containsNull(m)) {\r\n        let value = Math.random() < 0.9 ? 2 : 4;\r\n\r\n        let rowIndex = this.random(0, maxValue);\r\n        let colIndex = this.random(0, maxValue);\r\n        while (m[rowIndex][colIndex]) {\r\n          rowIndex = this.random(0, maxValue);\r\n          colIndex = this.random(0, maxValue);\r\n        }\r\n\r\n        m[rowIndex][colIndex] = value;\r\n      }\r\n    }\r\n  };\r\n\r\n  undoAction = () => {\r\n    this.setState({\r\n      matrix: this.state.prev,\r\n      score: this.state.prevScore\r\n    });\r\n    this.myRef.current.focus();\r\n  };\r\n\r\n  swipeToKeyboardEmulator = e => {\r\n    const dir = e.dir.toLowerCase();\r\n    if (dir === \"left\") {\r\n      this.handleKeyDown({ key: \"ArrowLeft\" });\r\n    } else if (dir === \"right\") {\r\n      this.handleKeyDown({ key: \"ArrowRight\" });\r\n    } else if (dir === \"up\") {\r\n      this.handleKeyDown({ key: \"ArrowUp\" });\r\n    } else if (dir === \"down\") {\r\n      this.handleKeyDown({ key: \"ArrowDown\" });\r\n    }\r\n  };\r\n\r\n  handleKeyDown = async e => {\r\n    const { key } = e;\r\n    let score;\r\n    if (\r\n      key === \"ArrowLeft\" ||\r\n      key === \"ArrowRight\" ||\r\n      key === \"ArrowUp\" ||\r\n      key === \"ArrowDown\"\r\n    ) {\r\n      let ind = [];\r\n      // let score = this.state.score\r\n      let prevScore = this.state.score\r\n\r\n      const clone = items =>\r\n        items.map(item => (Array.isArray(item) ? clone(item) : item));\r\n\r\n      let m = clone(this.state.matrix);\r\n\r\n      m.forEach((row, i) => {\r\n        row.forEach((element, j) => {\r\n          if (element !== null) {\r\n            ind.push({ rIndex: i, cIndex: j, value: element });\r\n          }\r\n        });\r\n      });\r\n\r\n      let hasMatrixChanged;\r\n\r\n      if (key === \"ArrowLeft\") {\r\n        ind.forEach(s => {\r\n          this.move(m, s, \"left\");\r\n        });\r\n\r\n        score = this.merge(m, ind, \"left\");\r\n\r\n        hasMatrixChanged =\r\n          JSON.stringify(m) !== JSON.stringify(this.state.matrix);\r\n\r\n        if (hasMatrixChanged) {\r\n          this.insertNew(m);\r\n        }\r\n      } else if (key === \"ArrowUp\") {\r\n        ind.forEach(s => {\r\n          this.move(m, s, \"up\");\r\n        });\r\n\r\n        score = this.merge(m, ind, \"up\");\r\n        hasMatrixChanged =\r\n          JSON.stringify(m) !== JSON.stringify(this.state.matrix);\r\n\r\n        if (hasMatrixChanged) {\r\n          this.insertNew(m);\r\n        }\r\n      } else if (key === \"ArrowRight\") {\r\n        let colSorted = ind.slice().sort((a, b) => {\r\n          if (a.cIndex > b.cIndex) {\r\n            return -1;\r\n          } else if (a.cIndex < b.cIndex) {\r\n            return 1;\r\n          }\r\n          return 1\r\n        });\r\n\r\n        colSorted.forEach(s => {\r\n          this.move(m, s, \"right\");\r\n        });\r\n\r\n        score = this.merge(m, colSorted, \"right\");\r\n\r\n        hasMatrixChanged =\r\n          JSON.stringify(m) !== JSON.stringify(this.state.matrix);\r\n\r\n        if (hasMatrixChanged) {\r\n          this.insertNew(m);\r\n        }\r\n      } else if (key === \"ArrowDown\") {\r\n        ind\r\n          .slice()\r\n          .reverse()\r\n          .forEach(s => {\r\n            this.move(m, s, \"down\");\r\n          });\r\n\r\n        score = this.merge(m, ind.slice().reverse(), \"down\");\r\n\r\n        hasMatrixChanged =\r\n          JSON.stringify(m) !== JSON.stringify(this.state.matrix);\r\n\r\n        if (hasMatrixChanged) {\r\n          this.insertNew(m);\r\n        }\r\n      }\r\n\r\n      if (hasMatrixChanged) {\r\n        this.setState({\r\n          prev: this.state.matrix,\r\n          matrix: m,\r\n          score,\r\n          prevScore\r\n        });\r\n      }\r\n    }\r\n  };\r\n\r\n  onUnload = e => {\r\n    // the method that will be used for both add and remove event\r\n    e.preventDefault();\r\n    e.returnValue = \"\";\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <>\r\n        <ParentContainer onFocus={() => this.myRef.current.focus()}>\r\n          <BtnGroup>\r\n            <button\r\n              onClick={this.undoAction}\r\n              className=\"game-btn undo-btn\"\r\n              title=\"Undo last move\"\r\n            />\r\n            <button\r\n              onClick={() =>\r\n                this.setState({\r\n                  optedForRestart: !this.state.optedForRestart,\r\n                  gridChange: false\r\n                })\r\n              }\r\n              className=\"game-btn refresh-btn\"\r\n              title=\"Reset the game\"\r\n            />\r\n            <button\r\n              onClick={() =>\r\n                this.setState({\r\n                  optedForRestart: false,\r\n                  gridChange: !this.state.gridChange\r\n                })\r\n              }\r\n              className=\"game-btn grid-btn\"\r\n              title=\"Change grid size\"\r\n            />\r\n          </BtnGroup>\r\n\r\n          <Swipeable\r\n            onSwiped={eventData => this.swipeToKeyboardEmulator(eventData)}\r\n            preventDefaultTouchmoveEvent={true}\r\n          >\r\n            <OuterBox\r\n              ref={this.myRef}\r\n              onBlur={() => this.setState({ focus: false })}\r\n              onFocus={() => this.setState({ focus: true })}\r\n              // className=\"outer-box\"\r\n              onKeyDown={e => this.handleKeyDown(e)}\r\n              tabIndex=\"0\"\r\n            >\r\n              {this.state.isGameWon && !this.state.continue && (\r\n                <div className=\"game-won\">\r\n                  <div>Game Won!</div>\r\n                  <div\r\n                    className=\"game-reset option\"\r\n                    onClick={() => this.setState({ continue: true })}\r\n                    style={{ fontSize: \"20px\", fontWeight: \"600\" }}\r\n                  >\r\n                    Continue\r\n                  </div>\r\n                </div>\r\n              )}\r\n\r\n              {this.state.isGameOver && (\r\n                <div className=\"game-won\">Game Over!</div>\r\n              )}\r\n\r\n              {this.state.optedForRestart && (\r\n                <div className=\"game-won\" style={{ flexDirection: \"column\" }}>\r\n                  Restart?\r\n                  <div\r\n                    style={{\r\n                      display: \"flex\",\r\n                      fontSize: \"50px\",\r\n                      width: \"inherit\",\r\n                      justifyContent: \"space-around\"\r\n                    }}\r\n                  >\r\n                    <div\r\n                      className=\"game-reset option\"\r\n                      onClick={() => this.startOver(4)}\r\n                    >\r\n                      Yes\r\n                    </div>\r\n                    <div\r\n                      className=\"game-reset option\"\r\n                      onClick={() => this.setState({ optedForRestart: false })}\r\n                    >\r\n                      No\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              )}\r\n\r\n              {this.state.gridChange && (\r\n                <div>\r\n                  <div className=\"change-grid\">\r\n                    <div className=\"box\">\r\n                      <div\r\n                        className={\r\n                          `option` +\r\n                          (this.state.game.size === \"_classic\"\r\n                            ? ` selected`\r\n                            : ``)\r\n                        }\r\n                        onClick={() => this.changeGrid(4)}\r\n                      >\r\n                        Classic <br />\r\n                        (4x4)\r\n                      </div>\r\n                    </div>\r\n                    <div className=\"box\">\r\n                      <div\r\n                        className={\r\n                          `option` +\r\n                          (this.state.game.size === \"_big\" ? ` selected` : ``)\r\n                        }\r\n                        onClick={() => this.changeGrid(5)}\r\n                      >\r\n                        Big <br />\r\n                        (5x5)\r\n                      </div>\r\n                    </div>\r\n                    <div className=\"box\">\r\n                      <div\r\n                        className={\r\n                          `option` +\r\n                          (this.state.game.size === \"_bigger\"\r\n                            ? ` selected`\r\n                            : ``)\r\n                        }\r\n                        onClick={() => this.changeGrid(6)}\r\n                      >\r\n                        Bigger <br />\r\n                        (6x6)\r\n                      </div>\r\n                    </div>\r\n                    <div className=\"box\">\r\n                      <div\r\n                        className={\r\n                          `option` +\r\n                          (this.state.game.size === \"_huge\" ? ` selected` : ``)\r\n                        }\r\n                        onClick={() => this.changeGrid(8)}\r\n                      >\r\n                        Huge <br />\r\n                        (8x8)\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              )}\r\n\r\n              {this.state.matrix.map((row, i) =>\r\n                row.map((element, j) => (\r\n                  <div\r\n                    key={i + \"-\" + j}\r\n                    className={\r\n                      `block ` +\r\n                      (element !== null ? `exists ` : ``) +\r\n                      this.state.game.size\r\n                    }\r\n                  >\r\n                    <div\r\n                      className={\r\n                        `inner _` +\r\n                        (this.state.matrix[i][j] !== null\r\n                          ? this.state.matrix[i][j]\r\n                          : ``)\r\n                      }\r\n                    >\r\n                      {this.state.matrix[i][j]}\r\n                    </div>\r\n                  </div>\r\n                ))\r\n              )}\r\n            </OuterBox>\r\n            {/* <button onClick={() => this.startOver(4)}>for 4x4</button>\r\n            <button onClick={() => this.startOver(5)}>for 5x5</button>\r\n            <button onClick={() => this.startOver(6)}>for 6x6</button>\r\n            <button onClick={() => this.startOver(8)}>for 8x8</button> */}\r\n          </Swipeable>\r\n\r\n          <ScoreContainer>\r\n            <ActualScore>\r\n              SCORE\r\n              <h3 style={{ margin: 0 }}>{this.state.score}</h3>\r\n            </ActualScore>\r\n          </ScoreContainer>\r\n        </ParentContainer>\r\n        {!this.state.focus && (\r\n          <p style={{ textAlign: \"center\" , color:\"#fff\"}}>\r\n            Tap on any block to continue playing\r\n          </p>\r\n        )}\r\n      </>\r\n    );\r\n  }\r\n}\r\nexport default TwentyFourtyEight;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport Nav from \"./Nav\";\r\n// import App from './App';\r\n// import TicTacToe from './TicTacToe'\r\nimport TwentyFourtyEight from \"./TwentyFourtyEight\"\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Nav/>\r\n    <TwentyFourtyEight/>\r\n   </React.StrictMode>\r\n   , \r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}